% Inspired by Emelie!
% July 27 2015

\documentclass[10pt]{article}

% packages
\usepackage[default, osfigures,scale = 1]{opensans} % Use Open Sans
\usepackage{booktabs} % Make nice table
\usepackage{color} % color
\usepackage[dvipsnames]{xcolor} % More color?
\usepackage{graphicx} % Add picture
\usepackage{fancyhdr} % Fancy fooder and header
\usepackage{float} % Taming the unruly figures
\usepackage{amssymb} % For squares and other math symbols
\usepackage{multicol} % Add multicols

% Set page margin, adapted from Emelie CLBC styling, so stylish :)
\oddsidemargin -10pt
\evensidemargin -10pt
\marginparwidth 50pt
\marginparsep 5pt
\topmargin -0.2in
\headheight 12pt
\textheight 8.8in
\textwidth 6.25in
\hoffset = .5in % set horiontal margin
\renewcommand{\baselinestretch}{1.3} % set line spacing
\setlength{\parskip}{\smallskipamount} % set paragraph spacing
\raggedright % For left-justified text

\renewcommand\labelitemi{$\blacksquare$} % change bullet to black square
\setlength{\columnsep}{1.5cm} % change col separation

% Head and Feet
\pagestyle{fancy}
\fancyhf{} % clear all header and footer fields
\fancyhead[CO]{Design in Sweden. Inspired by Emelie. Made in China.}
\fancyfoot[C]{For Your Eyes Only \thepage}
\renewcommand{\headrulewidth}{0pt} % no line in the header
\renewcommand{\footrulewidth}{0.1pt}

% Title
% \title{A Simple Neater Report}
% \author{Emelie \& Ben}
% \date{\today{}}
% \maketitle

% Some hook that suppose to make figure caption goes on top, couldn't get it to work but ...
% Need more Emelie solution!
% see http://stackoverflow.com/questions/24657216/caption-above-figure-using-knitr
% <<captionabove, include=FALSE>>=
% f <- function(x, options) {
%    paste("\\end{kframe}\n", 
%          "\\caption{", options$capT, "}\n", 
%          hook_plot_tex(x, options), 
%          "\n\\begin{kframe}", sep = "")
%  }
%  knit_hooks$set(plot = f)
% @

% Main Document
\begin{document}

% Load R packages and get data
<<library, echo = FALSE, message = FALSE, warning = FALSE>>=

library(dplyr)
library(ggthemes)
library(ggplot2)
library(grid)
library(gridExtra)
library(scales)
library(WDI)

# Get World Bank Data Mobile subscriptions (per 100 people) and 
# Urban population (% of total) indicators between 1980 and 2014
wdi_data <- WDI(country = "all", 
           indicator = c("IT.CEL.SETS.P2","SP.URB.TOTL.IN.ZS"), 
           start = 1980, 
           end = 2014)

# Get metadata
metadata <- as.data.frame(WDI_data[2])

# Merge it with wdi data
wdi_cdata <- merge(wdi_data, metadata, by.x = "country", by.y = "country.country")

# Make pretty name for indicators
names(wdi_cdata)[4] <- "Cell/100 people"
names(wdi_cdata)[5] <- "Urban pop (% of total)"
@

\begin{center}
\section*{A Simple Report}
\end{center}

% This is how you would include a figure using the graphicx package
% \begin{figure}
%  \includegraphics[width=\textwidth]{figure/donut-1.pdf}
%  \caption{This figure shows the logo of my website.}
%  \label{fig:donut}
% \end{figure}

<<graph_donut, echo = FALSE, message = FALSE, warning = FALSE, fig.height = 2>>=

# Donut graph using ggplot2
# Some make up number for now
# see http://stackoverflow.com/questions/13615562/ggplot-donut-chart
dat1 <- data.frame(count=c(10, 90), category=c("Agree", "Disagree"))
dat2 <- data.frame(count=c(35, 65), category=c("Agree", "Disagree"))
dat3 <- data.frame(count=c(13, 87), category=c("Agree", "Disagree"))

# Add addition columns, needed for drawing with geom_rect.
# Should create a wrapper function in the future
dat1$fraction = dat1$count / sum(dat1$count)
dat1 = dat1[order(dat1$fraction), ]
dat1$ymax = cumsum(dat1$fraction)
dat1$ymin = c(0, head(dat1$ymax, n=-1))

dat2$fraction = dat2$count / sum(dat2$count)
dat2 = dat2[order(dat2$fraction), ]
dat2$ymax = cumsum(dat2$fraction)
dat2$ymin = c(0, head(dat2$ymax, n=-1))

dat3$fraction = dat3$count / sum(dat3$count)
dat3 = dat3[order(dat3$fraction), ]
dat3$ymax = cumsum(dat3$fraction)
dat3$ymin = c(0, head(dat3$ymax, n=-1))

# First donut
donut1 <- ggplot(dat1, aes(fill = category, ymax = ymax, ymin = ymin, xmax = 4, xmin = 3)) +
  geom_rect(colour = NA) +
  coord_polar(theta = "y") +
  xlim(c(2, 4)) +
  theme_bw() +
  theme(panel.grid = element_blank(), # Remove elements and shrink all the margins
        panel.border = element_blank(),
        legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        legend.title = element_blank(),
        plot.margin = unit(c(-.55,-.6,-.6,-.6),"cm"),
        legend.margin = unit(c(0,0,-1,-1),"cm")) +
  annotate("text", x = 2, y = 1, label = "90%", size = 7, color = "#00BFC4")

# Second donut
donut2 <- ggplot(dat2, aes(fill = category, ymax = ymax, ymin = ymin, xmax = 4, xmin = 3)) +
  geom_rect(colour = NA) +
  coord_polar(theta = "y") +
  xlim(c(2, 4)) +
  theme_bw() +
  theme(panel.grid = element_blank(), # Remove elements and shrink all the margins
        panel.border = element_blank(),
        legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        legend.title = element_blank(),
        plot.margin = unit(c(-.55,-.6,-.6,-.6),"cm"),
        legend.margin = unit(c(0,0,-1,-1),"cm")) +
  annotate("text", x = 2, y = 1, label = "65%", size = 7, color = "#00BFC4")

# Third donut
donut3 <- ggplot(dat3, aes(fill = category, ymax = ymax, ymin = ymin, xmax = 4, xmin = 3)) +
  geom_rect(colour = NA) +
  coord_polar(theta = "y") +
  xlim(c(2, 4)) +
  theme_bw() +
  theme(panel.grid = element_blank(), # Remove elements and shrink all the margins
        panel.border = element_blank(),
        legend.position = "none",
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        legend.title = element_blank(),
        plot.margin = unit(c(-.55,-.6,-.6,-.6),"cm"),
        legend.margin = unit(c(0,0,-1,-1),"cm")) +
  annotate("text", x = 2, y = 1, label = "87%", size = 7, color = "#00BFC4")

# Use gridExtra grid.arrange function to make multiple plots
grid.arrange(donut1, donut2, donut3, nrow=1)
@

% Make inline numbers
<<inlineNum, echo = FALSE, warning = FALSE, message = FALSE>>=

# Find top country and cell/100 people
inline_num <- filter(wdi_cdata, year == 2013) %>% top_n(1, `Cell/100 people`)
Inum <- inline_num[,"Cell/100 people"]
Icountry <- inline_num[,"country"]
@

\begin{multicols}{2}
\subsection*{\color{TealBlue}See what Neater can Do!}

This is a simple \textit{Neater Report}. At \textbf{\textcolor{TealBlue}{\Sexpr{sprintf("%3.0f",Inum)}}} 
mobile phones per 100 people, \textbf{\textcolor{TealBlue}{\Sexpr{Icountry}}} has the highest number of cell subscription per 100 people (see Figure \ref{fig:graph1}). With \LaTeX{}, we can typeset your report and style it precisely the way you want it and make it \textbf{\textcolor{TealBlue}{visual}}.

% column break
\vfill
\columnbreak

\subsection*{\color{TealBlue} Anything is possible!}

Like any reports, we can include:
  \begin{itemize}
    \setlength\itemsep{-.8em} % change spacing
    \item Graph
    \item Table
    \item Paragraph
    \item Inline number
  \end{itemize}

\end{multicols}

  
\begin{figure}[H]
\caption{\textcolor{TealBlue}{Elegant Chart Inspired by Emelie!}}
\label{fig:graph1}
<<graph_barLine, echo = FALSE, warning = FALSE, fig.height = 4>>=

# set themes
theme_set(theme_tufte())

# Make left bar graph
bar_data <- filter(wdi_cdata, year == 2013) %>% top_n(10, `Cell/100 people`)

bar <- ggplot(bar_data, aes(reorder(country, `Cell/100 people`), `Cell/100 people`)) + 
  geom_bar(stat='identity', fill = "#00BFC4") + 
  coord_flip() + 
  labs(x = "") + 
  theme(axis.text = element_text(size = rel(.6), color = "grey70"),
        axis.title = element_text(size = rel(.7), color = "grey70"),
        axis.ticks.x = element_blank(),
        axis.ticks.y = element_line(color = "grey70")) +
   geom_text(aes(label = sprintf("%3.0f",`Cell/100 people`)), 
             hjust = +1.2, color = "white", size = rel(3),
                     plot.margin=unit(c(0,-.5,-.5,-.5), "cm")) + 
  geom_hline(yintercept = c(100, 200, 300), color = "white")

# Make right line graph
line_data <- filter(wdi_cdata , 
                    country %in% c("World", "European Union", "OECD members", 
                                   "High income", "Low income", "Middle income", "North America"))

line_data$country <- ifelse(line_data$country == "European Union", "EU", line_data$country)

# Convert into factor for sorting
line_data$group <- factor(line_data$country)
line_data$group <- factor(line_data$group, levels = c("High income","Middle income", "Low income", "EU", "North America", "OECD members", "World"))

line <- ggplot(line_data, aes(year, `Cell/100 people`, colour = group)) + 
  geom_line(size = .5) + 
  theme_fivethirtyeight() + 
  labs(x = "") +
  guides(col = guide_legend(nrow = 2, byrow = TRUE, title = "")) + 
  scale_color_manual(values=c("#525252","#737373","#969696","#1f78b4",
                              "#a6cee3","#b2df8a","#ff7f00")) +
  theme(axis.text = element_text(size = rel(.6), color = "grey70"),
        axis.title = element_text(size = rel(.7), color = "grey70"),
        axis.title.y = element_text(size = rel(.7), angle = 90),
        legend.text = element_text(size = rel(.6), color = "grey70"),
        legend.title = element_text(size = rel(.6), color = "grey70"),
        panel.background = element_rect(fill = "white"),
        plot.background = element_rect(fill = "white"),
        legend.background = element_rect(fill = "white"),
        legend.key = element_rect(fill = "white"),
        plot.margin = unit(c(0.2, 0, 0,-.5), "cm"),
        legend.margin = unit(-1, "cm"))

# Use gridExtra grid.arrange function to make multiple plots
grid.arrange(bar, line, nrow = 1)
@
\end{figure}

\newpage

\begin{table}
\caption {\textcolor{TealBlue}{Mobile Subscription per 100 People by Country Income Grouping in 2013}}
\label{tab:title} 
\begin{center}
<<table, echo = FALSE>>=

table_data <- filter(wdi_cdata , country.income == "Aggregates" & year == 2013 & country %in% c("World", "European Union", "OECD members", "High income", "Low income", "Middle income", "North America")) %>% arrange(-`Cell/100 people`)

kable(table_data[c(1,3,4,5)], row.names=FALSE, booktabs=TRUE, digits = 1)
@
\end{center}
\end{table}

\begin{center}
\subsection*{Special thanks to \textcolor{Lavender}{Emelie}!}
\end{center}

\begin{figure}[H]
\caption{\textcolor{TealBlue}{Another Elegant Chart Inspired by Emelie!}}

<<facetgraph, echo = FALSE, warning = FALSE, fig.height = 6>>=

# Make facet scatter plot
scatter_data <- filter(wdi_cdata, year == 2013)
scatter_data <- filter(scatter_data, country.income != "Aggregates")

# Convert into factor for sorting
scatter_data$group <- factor(scatter_data$country.income)
scatter_data$group <- factor(scatter_data$group, levels = c("High income: nonOECD","High income: OECD","Upper middle income","Lower middle income","Low income","Not classified"))     

# Add label to label Macau
scatter_data$label <- ifelse(scatter_data$country == "Macao SAR, China", "Macau", "")

ggplot(scatter_data, aes(`Urban pop (% of total)`/100, `Cell/100 people`, color = group)) + 
  geom_point() + 
  geom_smooth(method=lm, se=FALSE) + 
  facet_wrap(~group) +
  labs(x = "Urban pop (% of total)") +
  guides(col = guide_legend(nrow = 2, byrow = TRUE, title="")) +
  scale_x_continuous(labels = percent) +
  theme(legend.position = "bottom",
        axis.text = element_text(size = rel(.6), color = "grey70"),
        axis.title = element_text(size = rel(.7), color = "grey70"),
        axis.ticks = element_line(color = "grey70"),
        legend.text = element_text(color = "grey70"),
        strip.text = element_text(color = "grey70")) +
  geom_text(aes(label = label), hjust=1.2, size = rel(3), color = "#00BFC4")
@
\end{figure}

\end{document}